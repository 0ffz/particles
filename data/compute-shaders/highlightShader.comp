#version 430
layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

uniform vec2 mouse;
uniform float gridSize;
uniform int gridRows;
uniform int gridCols;
uniform int count;
uniform float sigma;
uniform float epsilon;

struct ParticleProps {
    vec2 position;
    vec2 velocity;
};

layout (binding = 0) buffer particle2CellKeyBuffer {
    uint particle2CellKey[];
};

layout (binding = 1) buffer sortedParticleIndicesBuffer {
    uint sortedParticleIndices[];
};

layout (binding = 2) buffer cellOffsetsBuffer {
    uint cellStartIndices[];
};

layout (binding = 3) buffer colorBuffer {
    vec4 colors[];
};

layout (binding = 4) buffer currParticlesBuffer {
    ParticleProps currParticles[];
};

float lennardJonesForce(float distance) {
    float inv_r = sigma / distance;
    float inv_r6 = inv_r * inv_r * inv_r * inv_r * inv_r * inv_r;
    float inv_r12 = inv_r6 * inv_r6;
    return 24.0 * epsilon * (2.0 * inv_r12 - inv_r6) / distance;
}

uint getCellId(float x, float y) {
    int xGrid = int(x / gridSize);
    int yGrid = int(y / gridSize);
    return xGrid + yGrid * gridCols;
}

void main() {
//    const uint id = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
//    vec2 position = currParticles[id].position.xy;
//    // Get its grid index
//    int xGrid = int(position.x / gridSize);
//    int yGrid = int(position.y / gridSize);
//    int targetXGrid = int(mouse.x / gridSize);
//    int targetYGrid = int(mouse.y / gridSize);
//    uint cellId = xGrid + yGrid * gridCols;
//
//    vec2 netForce = vec2(0.0, 0.0);
//    if (xGrid != 0 && yGrid != 0 && xGrid != (gridCols - 1) && yGrid != (gridRows - 1)) {
//        colors[id] = vec4(targetXGrid == xGrid, targetYGrid == yGrid, 0, 1);
//
//        for (int x = -1; x <= 1; x++) {
//            for (int y = -1; y <= 1; y++) {
//                uint localCellId = cellId + x + (y * gridCols);
//                if(localCellId == targetXGrid + targetYGrid * gridCols) {
//                    colors[id] = vec4(1, 0.5, 0, 1);
//                }
//                uint startIndex = cellStartIndices[localCellId];
//
//                //TODO swap to a for loop and store a counts buffer for less memory accesses
//                for (uint i = startIndex; i < count; i++) {
//                    if (particle2CellKey[i] != localCellId) break;
//                    vec2 otherPos = currParticles[sortedParticleIndices[i]].position;
//                    if (otherPos == position) continue;
//                    vec2 direction = position - otherPos;
//                    float distance = length(direction);
//                    if (distance > 2.5 * 10.0) continue;
//                    netForce += normalize(direction) * lennardJonesForce(distance);
//                }
//            }
//        }
//
//        colors[id] = vec4(log(length(netForce)) / 40.0, 0, 0, 1);
//    }
//    vec2 firstParticleInGrid = currParticles[sortedParticleIndices[cellStartIndices[cellId]]].position;
////    float cellColor = cellId / float(gridCols * gridRows);
//    colors[id] = vec4(getCellId(firstParticleInGrid.x, firstParticleInGrid.y) == cellId, 0, 0, 1);

}
